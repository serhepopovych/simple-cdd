#!/bin/bash

## Global config

# Initial user account that can be used by automation setup services.
user='setup'

## Global helper routines

true()  {   :; }
false() { ! :; }

## Initial setup based on distro

eval $(
    # Source in subshell to not pollute environment

    release_file='/etc/os-release'

    if [ -f "$release_file" ] && . "$release_file" >/dev/null 2>&1; then
        distro="$ID"
        release="$VERSION_ID"
        codename="$VERSION_CODENAME"
        [ -n "$codename" ] ||
            codename="$(echo "$PRETTY_NAME" | sed -n -e 's/^.*(\(\w\+\)).*$/\1/p')"
    elif type lsb_release >/dev/null 2>&1; then
        distro="$(lsb_release -s -i)"
        release="$(lsb_release -s -r)"
        codename="$(lsb_release -s -c)"
    else
        # old or unsupported distro
        distro=''
        release=''
        codename=''
    fi

    distro="$(echo "$distro" | tr '[:upper:]' '[:lower:]')"
    [ -n "$distro" ] || exit

    release="${release%%.*}"
    [ "$release" -gt 0 ] 2>/dev/null || exit

    if [ "$distro" = 'centos' ]; then
        last_supported_release=7
    elif [ "$distro" = 'debian' ]; then
        last_supported_release=9
    else
        # unsupported distro
        exit 1
    fi

    [ $release -ge $last_supported_release ] &&
        new_distro=true || new_distro=false

    if [ "$distro" = 'debian' ]; then
        if $new_distro; then
            apt_url='http://deb.debian.org'
        else
            apt_url='http://archive.debian.org'
        fi
    else
        apt_url=''
    fi

    printf 'distro=%s release=%s codename=%s new_distro=%s apt_url=%s\n' \
        "$distro" "$release" "$codename" "$new_distro" "$apt_url"
)

[ -n "$distro" ] || exit

## Define package manager command that checks if package installed

# Usage: pkg_is_installed <pkg_name>
pkg_is_installed()
{
    local func="${FUNCNAME:-pkg_is_installed}"

    local pkg_name="${1:?missing 1st arg to ${func}() <pkg_name>}"

    if [ -z "${pkg_is_installed__cmd-}" ]; then
        if type rpm >/dev/null 2>&1; then
            pkg_is_installed__cmd='rpm -qi'
        elif type dpkg >/dev/null 2>&1; then
            pkg_is_installed__cmd='dpkg -s'
        else
            pkg_is_installed__cmd='false'
        fi
    fi

    $pkg_is_installed__cmd "$pkg_name" >/dev/null 2>&1 || return
}

## Configure grub2 theme; support it on both "serial" and "console"; fix iPXE support on EFI

update_grub=
grub_serial_tty=

# Enable "serial" and "console"
grub2default='/etc/default/grub'
if [ -f "$grub2default" ]; then
    # From grub-installer udeb
    get_serial_console() {
        eval set -- $(cat '/proc/cmdline')

        local serial=

        # Get the last 'console=' entry (if none, the whole string is returned)
        while [ $# -gt 0 ]; do
            case "$1" in
                console=ttyS*|console=com*) serial="$1" ;;
            esac
            shift
        done

        if [ -n "$serial" ]; then
            echo "$serial"
        fi
    }

    grub_serial_console() {
        local serconsole="$1"
        serconsole="${serconsole##console=ttyS}"
        serconsole="${serconsole##console=com}"
        local unit="${serconsole%%,*}"
        local speed parity word
        local options="${serconsole##*,}"

        if [ -z "$unit" ]; then
            return
        fi
        if [ "$unit" != "$options" ]; then
            # Take optional 1st (parity) and 2nd (word) characters after speed
            set -- `echo "$options" | sed -e 's,^\([0-9]*\)\(.\?\)\(.\?\).*$,\1 \2 \3,'`
            speed="$1"
            parity="$2"
            word="$3"
        fi
        [ -n "$speed" ] || speed='115200'
        case "$parity" in
            n) parity='--parity=no'   ;;
            e) parity='--parity=even' ;;
            o) parity='--parity=odd'  ;;
            *) parity=''              ;;
        esac
        [ -z "$word" ] || word="--word=$word"

        echo "serial --unit=$unit --speed=$speed $word $parity --stop=1"
    }

    for g in pc efi-x64 efi-amd64 efi-ia32; do
        pkg_is_installed "grub2-$g" ||
        pkg_is_installed "grub-$g" ||
            continue

        # enable both serial and regular console

        if grep -q '^GRUB_TERMINAL=' "$grub2default"; then
            # it is set by installer or by default in config
            sed -i "$grub2default" -e 's,^\(GRUB_TERMINAL\)=.*,\1="serial console",g'
        else
            echo "GRUB_TERMINAL=\"serial console\"" >> "$grub2default"
        fi

        if grep -q '^GRUB_SERIAL_COMMAND=.*--unit=\([0-9]*\).*' "$grub2default"; then
            # it is set by installer or by default in config
            :
        else
            serial="$(get_serial_console)"
            # From grub-efi.cfg
            serial="${serial:-console=ttyS0,115200n8}"
            echo "GRUB_SERIAL_COMMAND=\"$(grub_serial_console "$serial")\"" >> "$grub2default"
        fi

        grub_serial_tty="$(sed -n -e 's,^GRUB_SERIAL_COMMAND=.*--unit=\([0-9]*\).*,\1,p' "$grub2default")"
        if [ -n "$grub_serial_tty" ]; then
            grub_serial_tty="ttyS$grub_serial_tty"

            if [ -d '/sys/firmware/efi' ]; then
                # replace --unit=<u> with efi<u> on EFI systems to fix artifacts
                sed -i "$grub2default" -e '/^GRUB_SERIAL_COMMAND=/s,--unit=\([0-9]*\),efi\1,g'
            fi
        fi

        # disable "Advanced options ..." submenu and put entries in main menu

        if grep -q '^GRUB_DISABLE_SUBMENU=' "$grub2default"; then
            # it is set by installer or by default in config
            sed -i "$grub2default" -e 's,^\(GRUB_DISABLE_SUBMENU\)=.*,\1=y,g'
        else
            echo "GRUB_DISABLE_SUBMENU=y" >> "$grub2default"
        fi

        update_grub=y
        break
    done
fi # [ -f "$grub2default" ]

# Apply theme from debian-installer/build/boot/x86/grub/grub-efi.cfg
grub2theme='/etc/grub.d/05_debian_theme'
if [ -f "$grub2theme" ]; then
    cat >"$grub2theme" <<'_EOF'
#!/bin/sh

set -e

serial="$(sed -n -e 's,^GRUB_SERIAL_COMMAND=.*--unit=\([0-9]*\).*,\1,p' /etc/default/grub)"

if [ -n "$serial" ]; then
    if [ -d /sys/firmware/efi ]; then
        cat <<EOF
terminfo serial_efi$serial vt100-color -u
terminfo serial_com$serial vt100-color -u
EOF
    else
        cat <<EOF
terminfo serial      vt100-color -u
terminfo serial_com$serial vt100-color -u
EOF
    fi
fi

cat <<EOF

set color_normal=light-gray/black
set color_highlight=black/light-gray

set menu_color_normal=cyan/blue
set menu_color_highlight=blue/light-gray
EOF
_EOF

    update_grub=y
fi # [ -f "$grub2theme" ]

# Add support for ipxe on BIOS and EFI systems

# Usage: copy_ipxe_file <boot_ipxe>
copy_ipxe_file()
{
    local func="${FUNCNAME:-copy_ipxe_file}"

    local ipxe="${1:?missing 1st argument to ${func}() (boot_ipxe)}"

    [ -f "$ipxe" ] && return

    local file="${ipxe##*/}"
    local ipxe_iter

    for ipxe_iter in \
        "/usr/share/ipxe/$file" \
        "/usr/lib/ipxe/$file" \
        #
    do
        if [ -f "$ipxe_iter" ]; then
            install -Dm0644 "$ipxe_iter" "$ipxe"
            return
        fi
    done

    return 1
}

# ipxe.lkrn
ipxe_lkrn='/boot/ipxe.lkrn'
copy_ipxe_file "$ipxe_lkrn"

# ipxe.efi
ipxe_efi='/boot/ipxe.efi'
copy_ipxe_file "$ipxe_efi"

if [ -f "$ipxe_lkrn" -o -f "$ipxe_efi" ]; then
    grub2ipxe='/etc/grub.d/20_ipxe'
    cat >"$grub2ipxe" <<'_EOF'
#!/bin/sh

set -e

. /usr/share/grub/grub-mkconfig_lib

# iPXE is only supported on x86
case $(uname -m) in
	i?86|x86_64) ;;
	*) exit 0 ;;
esac

prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | sed -e "s/^/\t/")"

if [ -d /sys/firmware/efi ]; then
  IPXE=/boot/ipxe.efi
else
  IPXE=/boot/ipxe.lkrn
fi

if test -e "$IPXE" ; then
  IPXEPATH=$( make_system_path_relative_to_its_root "$IPXE" )
  echo "Found iPXE image: $IPXE" >&2
  if [ -d /sys/firmware/efi ]; then
    cat <<EOF
menuentry "Network boot (iPXE)" --users "" --class network {
${prepare_boot_cache}
	chainloader $IPXEPATH
}
EOF
  else
    cat <<EOF
menuentry "Network boot (iPXE)" --users "" --class network {
${prepare_boot_cache}
	linux16 $IPXEPATH
}
EOF
  fi
fi
_EOF
    # Make it executable
    chmod a+rx "$grub2ipxe"

    update_grub=y
fi # [ -f "$grub2ipxe" ]

# Ensure the updates go live
if [ -n "$update_grub" ]; then
    if type update-grub2 >/dev/null 2>&1; then
        update-grub2
    elif type update-grub >/dev/null 2>&1; then
        update-grub
    else
        grub2-mkconfig -o '/boot/grub2/grub.cfg'
    fi
fi

## Create `.' symlink in boot. This can be useful for compat configs

boot_boot='/boot/boot'
[ -e "$boot_boot" ] || ln -snf . "$boot_boot"

## Enable agetty(8) on serial console

if [ -n "$grub_serial_tty" ]; then
    # systemctl(1) fails with old systemd (e.g. on Debian GNU/Linux 7.x (wheezy))
    ln -snf '/lib/systemd/system/serial-getty@.service' \
            "/etc/systemd/system/getty.target.wants/serial-getty@$grub_serial_tty.service" ||:
fi

## Enable acpid(8) service by default to handle PWRBTN action

systemctl enable acpid.service ||:

## Enable tmpfs for /tmp

tmp_mount='/etc/systemd/system/tmp.mount'

if [ ! -f "$tmp_mount" ]; then
    for tmp_mount_share in \
        '/usr/lib/systemd/system/tmp.mount' \
        '/usr/share/systemd/tmp.mount' \
        ''
    do
       if [ -f "$tmp_mount_share" ]; then
           install -Dm0644 "$tmp_mount_share" "$tmp_mount" ||:
           break
       fi
    done

    if [ -z "$tmp_mount_share" ]; then
        # From Ubuntu 16.04 LTS
        cat >"$tmp_mount" <<'_EOF'
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

[Unit]
Description=Temporary Directory
Documentation=man:hier(7)
Documentation=http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems
ConditionPathIsSymbolicLink=!/tmp
DefaultDependencies=no
Conflicts=umount.target
Before=local-fs.target umount.target
After=swap.target

[Mount]
What=tmpfs
Where=/tmp
Type=tmpfs
Options=mode=1777,strictatime

[Install]
WantedBy=local-fs.target
_EOF
    fi
fi

if [ -f "$tmp_mount" ]; then
    sed -i "$tmp_mount" -e 's,^\(Options\)=\(.*\)$,\1=\2\,size=25%,g'
    systemctl enable "${tmp_mount##*/}"
fi

## Apply branding

$(
    # Source in subshell to not pollute environment
    release_file='/etc/os-release'
    if [ -f "$release_file" ] && . "$release_file" >/dev/null 2>&1; then
        :
    elif type lsb_release >/dev/null 2>&1; then
        PRETTY_NAME="$(lsb_release -s -i)"
    else
        PRETTY_NAME=
    fi

    [ -n "$PRETTY_NAME" ] || PRETTY_NAME="$(uname -s)"

    # /etc/issue
    banner='/etc/issue'
    if [ -f "$banner" ]; then
        cat >"$banner" <<_EOF
$PRETTY_NAME

  Hostname : \n
  TTY      : \l

_EOF
    fi

    # /etc/issue.net
    banner='/etc/issue.net'
    if [ -f "$banner" ]; then
        cat >"$banner" <<'_EOF'
_EOF
    fi

    # /etc/motd
    banner='/etc/motd'
    if [ -f "$banner" ]; then
        cat >"$banner" <<'_EOF'
_EOF
    fi
)

## Configure APT

if [ "$distro" = 'debian' ]; then
    ## Remove or create 99CheckValidUntil to ignore Release file expiry

    # This is required to keep apt-get(8) working for archived releases whose
    # Release file no longer maintained (e.g. ones hosted by global CDN
    # http://archive.debian.org). See apt.conf(5) for more info.

    f='/etc/apt/apt.conf.d/99CheckValidUntil'
    if $new_distro; then
        rm -f "$f" ||:
    else
        cat >"$f" <<_EOF
// Disable Release file expiry checks
Acquire::Check-Valid-Until false;
_EOF
    fi

    ## Remove 99AllowInsecureRepositories

    # This enabled only temporary to allow installation from insecure
    # (i.e. no Release.gpg and thus unsigned with PGP/GPG repository).
    #
    # Now we updated sources.list manually to point to main Debian
    # repositories that are signed there is no reason on keeping this
    # on production system.

    f='/etc/apt/apt.conf.d/99AllowInsecureRepositories'
    rm -f "$f" ||:
fi # [ "$distro" = 'debian' ]

## Add interfaces.d in /etc/network for ifupdown

interfaces='/etc/network/interfaces'
if [ -f "$interfaces" ]; then
    interfaces_d="$interfaces.d"
    if [ ! -d "$interfaces_d" ]; then
        install -d "$interfaces_d"
    fi

    if ! grep -q "^source\(-directory\)\?[ \t]\+$interfaces_d" "$interfaces"; then
        cat >"$interfaces" <<_EOF
# Source interfaces configuration
source $interfaces_d/*
_EOF
    fi
fi

## Create /etc/depmod.d (see depmod.d(8) for more information)

depmod_d='/etc/depmod.d'
[ -d "$depmod_d" ] || install -d "$depmod_d"

## Make /bin/bash default login shell for new users, root and $user.

if [ -e '/bin/bash' ]; then
    # Use /bin/bash as default shell for useradd(8).
    useradd_default='/etc/default/useradd'
    if [ -f "$useradd_default" ]; then
        sed -i "$useradd_default" -e 's,^\(SHELL\)=.*$,\1=/bin/bash,g'
    fi

    # Make it root shell
    if [ -d ~root ]; then
        usermod -s '/bin/bash' root
    fi

    # Make it $user shell
    if eval "d=~$user" && [ -d "$d" ]; then
        usermod -s '/bin/bash' "$user"
    fi
fi

## Set login shell session auto-logout after timeout

shell_timeout='/etc/profile.d/shell-timeout.sh'
if [ ! -f "$shell_timeout" ]; then
    cat >"$shell_timeout" <<'_EOF'
# Set non-X11 login shell session auto-logout after timeout
[ -n "$DISPLAY" ] || export TMOUT=$((20 * 60))
_EOF
fi

## Add sysctl(8) hardening settings from Ubuntu 16.04 LTS procps package

sysctl_d='/etc/sysctl.d/10-console-messages.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'

# the following stops low-level messages on console
kernel.printk = 4 4 1 7
_EOF
fi

sysctl_d='/etc/sysctl.d/10-ipv6-privacy.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'
# IPv6 Privacy Extensions (RFC 4941)
# ---
# IPv6 typically uses a device's MAC address when choosing an IPv6 address
# to use in autoconfiguration. Privacy extensions allow using a randomly
# generated IPv6 address, which increases privacy.
#
# Acceptable values:
#    0 - don’t use privacy extensions.
#    1 - generate privacy addresses
#    2 - prefer privacy addresses and use them over the normal addresses.
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2
_EOF
fi

sysctl_d='/etc/sysctl.d/10-kernel-hardening.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'
# These settings are specific to hardening the kernel itself from attack
# from userspace, rather than protecting userspace from other malicious
# userspace things.
#
#
# When an attacker is trying to exploit the local kernel, it is often
# helpful to be able to examine where in memory the kernel, modules,
# and data structures live. As such, kernel addresses should be treated
# as sensitive information.
#
# Many files and interfaces contain these addresses (e.g. /proc/kallsyms,
# /proc/modules, etc), and this setting can censor the addresses. A value
# of "0" allows all users to see the kernel addresses. A value of "1"
# limits visibility to the root user, and "2" blocks even the root user.
kernel.kptr_restrict = 1

# Also prevent unprivileged users from reading kernel messages ring buffer.
kernel.dmesg_restrict = 1
_EOF
fi

sysctl_d='/etc/sysctl.d/10-link-restrictions.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'
# These settings eliminate an entire class of security vulnerability:
# time-of-check-time-of-use cross-privilege attacks using guessable
# filenames (generally seen as "/tmp file race" vulnerabilities).
fs.protected_hardlinks = 1
fs.protected_symlinks = 1
_EOF
fi

sysctl_d='/etc/sysctl.d/10-lxd-inotify.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'
# Increase the user inotify instance limit to allow for about
# 100 containers to run before the limit is hit again
fs.inotify.max_user_instances = 1024
_EOF
fi

sysctl_d='/etc/sysctl.d/10-magic-sysrq.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'
# The magic SysRq key enables certain keyboard combinations to be
# interpreted by the kernel to help with debugging. The kernel will respond
# to these keys regardless of the current running applications.
#
# In general, the magic SysRq key is not needed for the average Ubuntu
# system, and having it enabled by default can lead to security issues on
# the console such as being able to dump memory or to kill arbitrary
# processes including the running screen lock.
#
# Here is the list of possible values:
#   0 - disable sysrq completely
#   1 - enable all functions of sysrq
#  >1 - enable certain functions by adding up the following values:
#          2 - enable control of console logging level
#          4 - enable control of keyboard (SAK, unraw)
#          8 - enable debugging dumps of processes etc.
#         16 - enable sync command
#         32 - enable remount read-only
#         64 - enable signalling of processes (term, kill, oom-kill)
#        128 - allow reboot/poweroff
#        256 - allow nicing of all RT tasks
#
#   For example, to enable both control of console logging level and
#   debugging dumps of processes: kernel.sysrq = 10
#
kernel.sysrq = 176
_EOF
fi

sysctl_d='/etc/sysctl.d/10-network-security.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'

# Turn on Source Address Verification in all interfaces to
# prevent some spoofing attacks.
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.rp_filter=1

# Turn on SYN-flood protections.  Starting with 2.6.26, there is no loss
# of TCP functionality/features under normal conditions.  When flood
# protections kick in under high unanswered-SYN load, the system
# should remain more stable, with a trade off of some loss of TCP
# functionality/features (e.g. TCP Window scaling).
net.ipv4.tcp_syncookies=1
_EOF
fi

sysctl_d='/etc/sysctl.d/10-ptrace.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'
# The PTRACE system is used for debugging.  With it, a single user process
# can attach to any other dumpable process owned by the same user.  In the
# case of malicious software, it is possible to use PTRACE to access
# credentials that exist in memory (re-using existing SSH connections,
# extracting GPG agent information, etc).
#
# A PTRACE scope of "0" is the more permissive mode.  A scope of "1" limits
# PTRACE only to direct child processes (e.g. "gdb name-of-program" and
# "strace -f name-of-program" work, but gdb's "attach" and "strace -fp $PID"
# do not).  The PTRACE scope is ignored when a user has CAP_SYS_PTRACE, so
# "sudo strace -fp $PID" will work as before.  For more details see:
# https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace
#
# For applications launching crash handlers that need PTRACE, exceptions can
# be registered by the debugee by declaring in the segfault handler
# specifically which process will be using PTRACE on the debugee:
#   prctl(PR_SET_PTRACER, debugger_pid, 0, 0, 0);
#
# In general, PTRACE is not needed for the average running Ubuntu system.
# To that end, the default is to set the PTRACE scope to "1".  This value
# may not be appropriate for developers or servers with only admin accounts.
kernel.yama.ptrace_scope = 1
_EOF
fi

sysctl_d='/etc/sysctl.d/10-zeropage.conf'
if [ ! -e "$sysctl_d" ]; then
    cat >"$sysctl_d" <<'_EOF'
# Protect the zero page of memory from userspace mmap to prevent kernel
# NULL-dereference attacks against potential future kernel security
# vulnerabilities.  (Added in kernel 2.6.23.)
#
# While this default is built into the Ubuntu kernel, there is no way to
# restore the kernel default if the value is changed during runtime; for
# example via package removal (e.g. wine, dosemu).  Therefore, this value
# is reset to the secure default each time the sysctl values are loaded.
vm.mmap_min_addr = 65536
_EOF
fi

## Create sane default iptables rules on Debian and Debian-based distros

iptables_dir='/etc/iptables'
if [ -d "$iptables_dir" ]; then
    iptables_rules_v4="$iptables_dir/rules.v4"
    if [ ! -s "$iptables_rules_v4" ]; then
        cat >"$iptables_rules_v4" <<'_EOF'
# sample configuration for iptables service
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p tcp -m conntrack --ctstate NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT
_EOF
    fi

    iptables_rules_v6="$iptables_dir/rules.v6"
    if [ ! -s "$iptables_rules_v6" ]; then
        cat >"$iptables_rules_v6" <<'_EOF'
# sample configuration for ip6tables service
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -j ACCEPT
-A INPUT -p ipv6-icmp -j ACCEPT
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p tcp -m conntrack --ctstate NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp6-adm-prohibited
-A FORWARD -j REJECT --reject-with icmp6-adm-prohibited
COMMIT
_EOF
    fi
fi

## Exit successfuly
exit 0

# Note that this file is sourced from POSIX shell and thus any valid
# shell buildins/functions/commands are accepted, but never added to
# Simple-CDD environment. They only useful to set variable values.

## Bootstrap to handle missing tools when sourced from installer environment

# Usage: bootstrap <cmd> ...
bootstrap()
{
    local func="${FUNCNAME:-bootstrap}"

    local cmd="${1:?missing 1st arg to ${func}() <cmd>}"
    shift

    if [ -n "${__in_installer_env__+x}" ]; then
        :
    else
        command "$cmd" "$@"
    fi
}

ln()   { bootstrap ln "$@";   }
date() { bootstrap date "$@"; }
gpg()  { bootstrap gpg "$@";  }

# This is default path for build-simple-cdd(1) set by internal VARIABLES
# in python3/dist-packages/simple_cdd/variables.py. Since these internal
# variables isn't defined for shell environment this config file included
# from (re)define these variables again.
simple_cdd_dir="${PWD}"

# Point scripts/init.sh symlink to distribution we building for.
ln -sf "debian/init.sh" "${simple_cdd_dir}/scripts/init.sh"

## Base configuration

# Define distribution (usually ${this%.conf}, no way to get sourced file)
distro="debian"
version="10"
codename="buster"
arch="amd64"
flavor="deb"

fv="${flavor}${version}"
dfv_path="${distro}/${flavor}/${version}"

# Profiles to add to simple-cdd
profiles="\
${fv},\
${fv}.local,\
${fv}.network,\
common/${distro},\
common/base,\
common/baremetal,\
common/virtual,\
common/net,\
common/text,\
common/devel,\
common/debug,\
common/docs,\
common/misc,\
common/localepurge\
"

# Either use http://deb.debian.org/debian/ global CDN for supported
# releases (e.g. oldstable, stable, testing) or archive global CDN
# at http://archive.debian.org/debian/ for old, unsupported releases
# (i.e. oldoldstable).
server="deb.debian.org"

## Simple-CDD, debian-cd and debian-installer

# Instance specific temporary directory.
simple_cdd_temp="${simple_cdd_dir}/tmp"

# Use constomized version of debian-cd and debian-installer to make
# custom grub menus with tools/boot/sid/parse_isolinux and use
# menu.c32 instead of vesamenu.c32.
debian_cd_dir="${simple_cdd_dir}/debian-cd"
custom_installer="${simple_cdd_dir}/debian-installer/debian/tmp"

# Set distribution name.
CODENAME="${codename}"
# Set distribution architecture.
ARCH="${arch}"

# Make debian-cd to add recommended and suggested packages to image.
NORECOMMENDS=0
NOSUGGESTS=0

# Name ISO image and set version based on date(1)
DISKTYPE=DVD
CDNAME="debian-gnu-linux-${version}"
DEBVERSION="$(date --utc '+%Y%m%d-%H%M%S')"
DISKINFO_DISTRO="Debian GNU/Linux ${version}"
VOLID_BASE="DEB $DEBVERSION"

# Do not add /doc, /tools and README as repository might not contain
# them. OMIT_DOC_TOOLS also ignores error when README is not available.
OMIT_DOC_TOOLS=1
OMIT_MANUAL=1
OMIT_RELEASE_NOTES=1

# Output ISO image(s) to flavor specific directory
OUT="${simple_cdd_dir}/images"

## Hacks to apply to bootloader (isolinux, grub, yaboot)

# Substitude SERIAL and TIMEOUT in isolinux.cfg or grub.cfg. This is
# handled by simple-cdd/tools/build/debian-cd.
#serial_console_speed=115200
#BOOT_TIMEOUT=300

# VGA/serial setup is done in syslinux/grub-efi configuration of
# debian-installer package since we using customized menus.
#
# This option is to activate hack in simple-cdd/tools/build/debian-cd
# that replaces vga=788 with vga=normal.
#vga_normal="true"
#use_serial_console="true"
#serial_console_opts="ttyS0,115200n8"

## Prepare kernel command line parameters by build-simple-cdd

# preseed/file={simple_cdd_preseed}
simple_cdd_preseed="preseed/file=/cdrom/simple-cdd/${fv}.local.preseed"

# debian-installer/locale={locale}
locale="en_US"

# console-keymaps-at/keymap={keyboard}
# keyboard-configuration/xkb-keymap={keyboard}
# keyboard-configuration/layout={keyboard}
keyboard="us"

# simple-cdd/profiles={auto_profiles} (note the order for settings override)
auto_profiles="base,${distro},${fv},${fv}.local"

# Additional parameters to append to kernel command line.
#KERNEL_PARAMS="$KERNEL_PARAMS nosmt"

## Mirrors

# Official mirror to get packages
debian_mirror="http://${server}/debian/"

# Official mirror to get packages with security updates
security_mirror="http://${server}/debian-security/"

# Note that updates mirrors might not be available for unsupported
# releases (i.e. oldoldstable): set corresponding variable to empty
# in that case to avoid build failures.
updates_mirror=""

# Official mirror to get packages backported from sid
backports_mirror="${debian_mirror}"

# Explicitly enable backports and select packages based on control
# file tags using reprepro(1) filter formula.
backports=""
backports_filter_formula="!Package (% *-dbg)"

# Use reprepro(1) as wget(1) (mirror_wget.py) may fail when no
# /debian/extrafiles available on mirror. See debian bug #909299 for details at
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=909299
mirror_tools="reprepro"

# No extra mirror files as repository might not contain them. See
# OMIT_DOC_TOOLS, OMIT_MANUAL and OMIT_RELEASE_NOTES variables
# configured for debian-cd
mirror_files=""

# Components we want to use from repository to build CD1.
mirror_components="main"

# It might happen that debian-archive-keyring.gpg contains expired keys
# causing reprepro(1) to fail. This happens because key expired and
# debian-archive-keyring package isn't provided.
#
# Work around that by providing explicit list of key fingerprints that
# might be used to sign various release files.
verify_release_keys="$(
    # Set this to a list of absolute pathes to keyrings in global config
    keyring="${keyring:-/usr/share/keyrings/debian-archive-keyring.gpg}"

    fp=''
    for kr in $keyring; do
        [ -r "$kr" ] || continue
        gpg --no-default-keyring --keyring "$kr" --list-keys --with-colons |\
        while read line; do
            save_ifs="$IFS"; IFS=':'
            set -- $line
            IFS="$save_ifs"

            # See doc/DETAILS for field description
            case "$2" in
                e|r|n) continue ;;
            esac
            case "$12" in
                *D*) continue ;;
            esac
            case "$12" in
                *s*|*S*) ;;
                *) continue ;;
            esac

            echo -n "$5|"
        done
    done
)"
verify_release_keys="${verify_release_keys%|}"
